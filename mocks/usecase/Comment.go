// Code generated by mockery v2.42.1. DO NOT EDIT.

package usecasemock

import (
	context "context"
	entity "github.com/andiksetyawan/boilerplate_svc/internal/model/post/entity"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Comment is an autogenerated mock type for the Comment type
type Comment struct {
	mock.Mock
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *Comment) GetByID(ctx context.Context, id uuid.UUID) (entity.Post, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 entity.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (entity.Post, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) entity.Post); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.Post)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewComment creates a new instance of Comment. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewComment(t interface {
	mock.TestingT
	Cleanup(func())
}) *Comment {
	mock := &Comment{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
